{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v57.0/sobjects/copado__Function__c/a0l7Z000004motGQAQ"
          },
          "copado__API_Name__c": "SNOW_Commit",
          "copado__Description__c": "A copado function to commit servicenow related code changes",
          "copado__Image_Name__c": "copado-multicloud-servicenow:v2",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.Property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"feature_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.featureBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"recreate_if_exists\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.recreateFeatureBranch}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"commit_message\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.message}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"base_branch\",\n  \"defaultValue\" : \"{$Pipeline.Property.commit_base_branch}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"replacement_rules\",\n  \"defaultValue\" : \"{$Pipeline.Property.replacement_rules}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"environment_variables\",\n  \"defaultValue\" : \"{$Source.Apex.EnvironmentVariables}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"snow_username\",\n  \"defaultValue\" : \"{$Source.Property.snow_username}\"\n}, {\n  \"name\" : \"snow_password\",\n  \"defaultValue\" : \"{$Source.Property.snow_password}\"\n}, {\n  \"name\" : \"snow_client_id\",\n  \"defaultValue\" : \"{$Source.Property.snow_client_id}\"\n}, {\n  \"name\" : \"snow_client_secret\",\n  \"defaultValue\" : \"{$Source.Property.snow_client_secret}\"\n}, {\n  \"name\" : \"snow_domain_name\",\n  \"defaultValue\" : \"{$Source.Property.snow_domain_name}\"\n}, {\n  \"name\" : \"snow_json_information\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.jsonInformation}\"\n}, {\n  \"name\" : \"user_story_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.userStoryId}\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -euo pipefail\nexport SHELLOPTS \ncd /app\n\nsource copado_init\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}'\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter feature_branch '{$Context.JobExecution__r.DataJson.featureBranchName}'\nfunction_parameter recreate_if_exists '{$Context.JobExecution__r.DataJson.recreateFeatureBranch}'\nfunction_parameter commit_message '{$Context.JobExecution__r.DataJson.message}'\nfunction_parameter base_branch '{$Context.JobExecution__r.DataJson.baseBranch}'\nfunction_parameter replacement_rules '{$Pipeline.property.replacement_rules}' --optional\nfunction_parameter environment_variables '{$Source.apex.EnvironmentVariables}'\n\naccess_token=\"\"\ndownloaded_file_path=\"\"\n\nfunction authenticate_snow() {\n    copado -p \"Authenticating ServiceNow\"\n    jsonResponse=$(python /app/servicenow-lib/get_oauth_token.py -client_id \"$snow_client_id\" -username \"$snow_username\" -password \"$snow_password\" -client_secret \"$snow_client_secret\" -instance \"$snow_domain_name\") || {\n        echo $jsonResponse\n        copado_finish 1 \"Authentication failed\" \"\" \"$jsonResponse\"\n    }\n    echo $jsonResponse\n    access_token=$(echo $jsonResponse | jq -r '.access_token')\n    if [[ \"$access_token\" == \"\" || \"$access_token\" == \"null\" ]]; then\n        copado_finish 1 \"Unable to retrieve access token\" \"\" \"$jsonResponse\"\n    fi\n    echo $access_token\n}\n\nfunction download_snow_updateset() {\n    copado -p \"Downloading UpdateSet\"\n    mkdir /tmp/retrieve/\n    json_information=$(echo \"${snow_json_information//\\\\/}\")\n    updateset_id=$(echo $json_information | jq -r '.updateSetId')\n    echo $updateset_id\n    echo $user_story_id\n    echo \"$access_token\"\n    cd /tmp/retrieve/\n    python /app/servicenow-lib/download_update.py -token \"$access_token\" -sys_id \"$updateset_id\" -instance \"$snow_domain_name\" || copado_finish 1 \"Updateset download failed\" \"\" \"While downloading updateset the process failed. Please check log for more details.\" \n    downloaded_file_path=\"/tmp/retrieve/package.xml\"\n}\n\nfunction process_updateset(){\n\tmkdir /tmp/json\n\tpython /app/servicenow-lib/xml2json.py -xml \"$downloaded_file_path\" -o \"/tmp/json/package.json\" -compact || copado_finish 1 \"XML to JSON conversion failed\" \"\" \"While converting updetset XML to JSON copado encountered error. Please check log for more details.\"\n    \n    copado -u \"/tmp/json/package.json\" -n \"package.json\"\n    python /app/servicenow-lib/decompose_json2.py -json \"/tmp/json/package.json\" -o \"/tmp/retrieve\" || copado_finish 1 \"Decompose failed\" \"\" \"While decomposing updateset the process failed. Please check log for more details.\" \n}\n\nfunction retrieve_changes() {\n    profiler authenticate_snow\n    profiler download_snow_updateset\n    profiler process_updateset\n}\n\nfunction merge_retrieved_changes() {\n    echo '[merge] merge the retrieved files into the repository'\n    cp -afT /tmp/retrieve/ .\n    echo '[merge] delete any change marked as deletion'\n    copado_file_mapper --filter-action delete --delete | limit_output\n}\n\n\n\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite\ncopado_log_changes\n\ncopado -p \"Retrieving changes\"\nprofiler retrieve_changes\n\ncd /app\n\ncopado -p \"Fetching branches\"\nprofiler copado_git --depth \"$git_depth\" \"$base_branch\"\nprofiler copado_git --depth \"$git_depth\" -c \"$feature_branch\"\n\nprofiler merge_retrieved_changes\n\ncopado -p \"Applying replacement rules\"\necho \"$replacement_rules\" > ~/.replacement_rules.json\necho \"$environment_variables\" > ~/.environment_variables.json\nprofiler copado_replacer --env-vars-replace-names --branch \"$feature_branch\"\n\necho '[git commit]'\nprofiler git add .\n\ngit commit -am \"$commit_message\" -- | limit_output || copado_finish 0 \"No changes\" '{\"status\": \"No changes\"}' \"\"\n\ncopado -p \"Pushing branch\"\nif [[ \"$recreate_if_exists\" == \"true\" && -n \"$(git ls-remote -h origin \"$feature_branch\")\" ]]; then\n    echo \"[git delete] re-create feature branch\"\n    git push origin --quiet --delete \"$feature_branch\" || true\nfi\nprofiler git push origin \"$feature_branch\"\ncopado -p \"Commit completed successfully (${SECONDS}s)\" -r '{\"status\": \"Complete\", \"commitId\": \"'\"$(git rev-parse HEAD)\"'\"}'",
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "Id": "a0l7Z000004motGQAQ",
          "LastReferencedDate": "2023-01-31T09:49:49.000+0000",
          "LastViewedDate": "2023-01-31T09:49:49.000+0000",
          "Name": "SNOW Commit"
        },
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v57.0/sobjects/copado__Function__c/a0l7Z000004mou3QAA"
          },
          "copado__API_Name__c": "SNOW_Deploy",
          "copado__Description__c": "A copado function to deploy servicenow app",
          "copado__Image_Name__c": "copado-multicloud-servicenow:v2",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"target_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"replacement_rules\",\n  \"defaultValue\" : \"{$Pipeline.property.replacement_rules}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"environment_variables\",\n  \"defaultValue\" : \"{$Destination.apex.EnvironmentVariables}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"release_version\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"deploy_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"dry_run\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.deploymentDryRun}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"builder_config\",\n  \"defaultValue\" : \"{$Destination.property.builder_config}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"rollback_enabled\",\n  \"defaultValue\" : \"false\"\n}, {\n  \"name\" : \"snow_username\",\n  \"defaultValue\" : \"{$Destination.Property.snow_username}\"\n}, {\n  \"name\" : \"snow_password\",\n  \"defaultValue\" : \"{$Destination.Property.snow_password}\"\n}, {\n  \"name\" : \"snow_client_id\",\n  \"defaultValue\" : \"{$Destination.Property.snow_client_id}\"\n}, {\n  \"name\" : \"snow_client_secret\",\n  \"defaultValue\" : \"{$Destination.Property.snow_client_secret}\"\n}, {\n  \"name\" : \"snow_domain_name\",\n  \"defaultValue\" : \"{$Destination.Property.snow_domain_name}\"\n}, {\n  \"name\" : \"promotion_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.copado__Promotion__c}\"\n}, {\n  \"name\" : \"updateset_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.copado__Promotion__r.cmcSnow__Update_Set_ID__c}\"\n}, {\n  \"name\" : \"collisionsFileVersionId\",\n  \"defaultValue\" : \"{$Context.Apex.cmcSnow.GetCollisionFileVersionId}\"\n}, {\n  \"name\" : \"auto_resolve\",\n  \"defaultValue\" : \"{$Destination.Property.auto_resolve}\"\n} ]",
          "copado__Script__c": "#!/bin/bash    \nset -euo pipefail\nexport SHELLOPTS \n \ncd /app  \nmkdir repository && cd repository\nsource copado_init\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}'\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter promotion_branch '{$Context.JobExecution__r.DataJson.promotionBranchName}'\nfunction_parameter target_branch '{$Context.JobExecution__r.DataJson.destinationBranchName}'\nfunction_parameter replacement_rules '{$Pipeline.property.replacement_rules}' --optional\nfunction_parameter environment_variables '{$Destination.apex.EnvironmentVariables}'\nfunction_parameter release_version '{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}' --optional\nfunction_parameter deploy_id '{$Job.ExecutionParent.Id}'\nfunction_parameter dry_run '{$Context.JobExecution__r.DataJson.deploymentDryRun}'\nfunction_parameter builder_config '{$Destination.property.builder_config}'\nfunction_parameter rollback_enabled 'false'\nfunction_parameter snow_username '{$Destination.Property.snow_username}'\nfunction_parameter snow_password '{$Destination.Property.snow_password}'\nfunction_parameter snow_client_id '{$Destination.Property.snow_client_id}'\nfunction_parameter snow_client_secret '{$Destination.Property.snow_client_secret}'\nfunction_parameter snow_domain_name '{$Destination.Property.snow_domain_name}'\nfunction_parameter promotion_id '{$Job.ExecutionParent.copado__Promotion__c}' --optional\nfunction_parameter updateset_id '{$Job.ExecutionParent.copado__Promotion__r.cmcSnow__Update_Set_ID__c}'\nfunction_parameter auto_resolve '{$Destination.Property.auto_resolve}'\naccess_token=\"\"\n\nfunction authenticate_snow() {\n    copado -p \"Authenticating ServiceNow\"\n    jsonResponse=$(python /app/servicenow-lib/get_oauth_token.py -client_id \"$snow_client_id\" -username \"$snow_username\" -password \"$snow_password\" -client_secret \"$snow_client_secret\" -instance \"$snow_domain_name\") || {\n        echo $jsonResponse\n        copado_finish 1 \"Authentication failed\" \"\" \"$jsonResponse\"\n    }\n    echo $jsonResponse\n    access_token=$(echo $jsonResponse | jq -r '.access_token')\n    if [[ \"$access_token\" == \"\" || \"$access_token\" == \"null\" ]]; then\n        copado_finish 1 \"Unable to retrieve access token\" \"\" \"$jsonResponse\"\n    fi\n    echo $access_token\n}\n\nexport -f authenticate_snow\n\nfunction copy_changed_files() {\n    mkdir /tmp/upload/\n    cp -a /app/repository/. /tmp/upload/ 2>/tmp/copy_log.txt\n}\n\nexport -f copy_changed_files\n\nfunction compose_snow_updateset() {\n\tcopado -p \"Preparing UpdateSet JSON\"\n    cd /app/servicenow-lib #this directory switch is needed here, as compose_json2.py is internally calling json2xml.py\n    python /app/servicenow-lib/compose_json2.py -p /tmp/upload/ -o /tmp/upload/package.json || copado_finish 1 \"Failed to compose JSON\" \"\" \"Please check the log for more details.\" \n    cd /app\n    cd repository\n}\n\nexport -f compose_snow_updateset\n\nfunction upload_snow_updateset() {\n    copado -p \"Uploading UpdateSet\"\n    jsonResponse=$(python /app/servicenow-lib/upload_snapshot.py -token \"$access_token\" -instance \"$snow_domain_name\" -file_path /tmp/upload/package.json) || copado_finish 1 \"Failed to upload UpdateSet\" \"\" \"Please check log for more details\"\n    echo $jsonResponse\n    result=$(echo $jsonResponse | jq -r '.result')\n    updateset_id=$(echo $result | jq -r '.remote_update_id')\n    echo $updateset_id\n    if [[ \"$updateset_id\" == \"\" || \"$updateset_id\" == \"null\" ]]; then\n        copado_finish 1 \"Failed to upload UpdateSet\" \"\" \"No UpdateSet Id generated\"\n    fi\n}\n\nexport -f upload_snow_updateset\n\nfunction update_promotion_record() {\n\tcopado -p \"Updating Promotion record with UpdateSet Id\"\n    export SFDX_ACCESS_TOKEN=\"$CF_SF_SESSIONID\"\n    export instanceUrl=\"https://$(echo $CF_SF_ENDPOINT | sed -e 's/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/')\"\n    sfdx auth:accesstoken:store -p -s -a copadoOrganization --instanceurl \"$instanceUrl\"\n    sfdx force:data:record:update -u copadoOrganization -s copado__Promotion__c -i \"$promotion_id\" -v \"cmcSnow__Update_Set_ID__c='$updateset_id'\" || copado_finish 1 \"Failed to update SNOW UpdateSet id in Promotion\" \"\" \"Please check the log for more details.\"\n}\n\nexport -f update_promotion_record\n\nfunction preview_updateset(){\n    copado -p \"Previewing Updateset\"\n    previewResponse=$(python /app/servicenow-lib/preview_updateset.py -token \"$access_token\" -update_id \"$updateset_id\" -instance \"$snow_domain_name\") || copado_finish 1 \"SNOW UpdateSet preview failed ${updateset_id}\" \"\" \"$previewResponse\"\n    echo $previewResponse\n    profiler check_preview_status\n}\nexport -f preview_updateset\n\nfunction check_preview_status(){\n    statusResponse=$(python /app/servicenow-lib/get_update_status.py -token \"$access_token\" -update_id \"$updateset_id\" -instance \"$snow_domain_name\" -interval 10 -loop 5 -state \"previewed\" -auto_resolve \"$auto_resolve\") || copado_finish 1 \"Unable to get SNOW UpdateSet preview status ${updateset_id}\" \"\" \"$statusResponse\"\n    echo $statusResponse\n}\nexport -f check_preview_status\n\nfunction check_collisions(){\n    copado -p \"Checking Collisions\"\n    collisionResponse=$(python /app/servicenow-lib/get_collisions.py -token \"$access_token\" -sys_id \"$updateset_id\" -instance \"$snow_domain_name\") || copado_finish 1 \"Unable to get SNOW UpdateSet collisions\" \"\" \"$statusResponse\"\n    echo $collisionResponse\n    # check if it is success and there is collision then upload the file to promotion record and stop execution with return 1 \n    status=$(echo $collisionResponse | jq -r '.result.status' | tr [:upper:] [:lower:])\n    problem_count=$(echo $collisionResponse | jq -r '.result.problems' | jq '. | length')\n    if [[ -n \"$status\" && \"$status\" != \"success\" ]]; then\n        copado_finish 1 \"Collision detection Failed\" \"\" \"Collision detection process has an error. Please check the log for more details.\"\n    elif [[ \"$status\" == \"success\" && $problem_count -gt 0 ]]; then\n        modified_collisionResponse=$(echo $collisionResponse | jq '.result.problems[] += { action: \"\", status: \"\" }')\n        echo $modified_collisionResponse > /tmp/SNOW_collisions.json\n        copado -u /tmp/SNOW_collisions.json -n \"collisions.json\" -i \"$promotion_id\"\n        copado_finish 1 \"Collision Detected\" \"\" \"While previewing the SNOW UpdateSet collisions detected. Please resolve all the collisions manually.\"\n    fi\n}\nexport -f check_collisions\n\nfunction validate_collisions_status(){\n    if [[ -n \"$collisionsFileVersionId\" ]]; then\n      copado -p \"Resolving Collisions\"\n      problem_actions='{\"problems\":[]}'\n      copado --downloadfiles \"$collisionsFileVersionId\"\n      jq -c '.result.problems[]' collisions.json | while read problem; do\n          collision_action=$(echo $problem | jq -r '.action')\n          problem_id=$(echo $problem | jq -r '.sys_id')\n          [[ -z \"$(echo $problem | jq -r '.action')\" ]] && copado_finish  1 \"Please provide resolution for each problem\" \"{}\" \"\"\n          actionString=\"{\\\"problem_id\\\" : \\\"${problem_id}\\\",\\\"action\\\" : \\\"${collision_action}\\\"}\"\n          problem_actions=$(echo $problem_actions | jq --argjson actionString \"$actionString\" '.problems |= [$actionString] + .')\n          echo $problem_actions > problem_actions.json\n      done\n   fi\n}\nexport -f validate_collisions_status\n\nfunction resolve_collisions(){\n    if [[ -n \"$collisionsFileVersionId\" ]]; then\n      problem_actions=$(<problem_actions.json)   \n      collisionResponse=$(python /app/servicenow-lib/resolve_collision.py -token \"$access_token\" -instance \"$snow_domain_name\" -problem_actions \"$problem_actions\") || copado_finish 1 \"Unable to resolve SNOW UpdateSet collisions\" \"\" \"$collisionResponse\"\n      echo $collisionResponse\n      status=$(echo $collisionResponse | jq -r '.result.status')\n      if [[ \"$status\" == 'success' ]]; then\n          copado -p \"All collisions are resolved\"\n      else\n          copado_finish  1 \"Resolving Collisions encountered an error\" \"\" \"Please check the log for more details.\"\n      fi\n   fi\n}\nexport -f resolve_collisions\n\nfunction commit_snow_updateset() {\n    copado -p \"Committing UpdateSet\"\n    commitResponse=$(python /app/servicenow-lib/commit_updateset.py -token \"$access_token\" -instance \"$snow_domain_name\" -updateset_id \"$updateset_id\") || copado_finish 1 \"Unable to commit SNOW UpdateSet\" \"\" \"$commitResponse\"\n    echo $commitResponse\n    profiler check_commit_status\n}\n\nexport -f commit_snow_updateset\n\nfunction check_commit_status() {\n    statusResponse=$(python /app/servicenow-lib/get_update_status.py -token \"$access_token\" -instance \"$snow_domain_name\" -update_id \"$updateset_id\" -loop 4 -interval 10 -state \"committed\") || copado_finish 1 \"Unable to get SNOW UpdateSet commit status\" \"\" \"$statusResponse\"\n    echo $statusResponse\n}\n\nexport -f check_commit_status\n\nfunction process_updateset(){\n    if [[ -z \"$updateset_id\" ]]; then\n        profiler compose_snow_updateset\n        profiler upload_snow_updateset\n        profiler update_promotion_record\n    fi\n}\nexport -f process_updateset\n\nfunction check_updateset_collision(){\n    if [[ -z \"$collisionsFileVersionId\" ]]; then\n        profiler preview_updateset\n        profiler check_collisions\n    fi\n}\nexport -f check_updateset_collision\n\nfunction resolve_collision_and_commit(){\n    profiler validate_collisions_status\n    profiler resolve_collisions\n    profiler commit_snow_updateset\n}\nexport -f resolve_collision_and_commit\n\n\nfunction snow_deploy() {\n    profiler authenticate_snow\n    profiler process_updateset\n    profiler check_updateset_collision\n    profiler resolve_collision_and_commit\n}\n\nexport -f snow_deploy\n\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite\ncopado_log_changes\n\ncopado -p \"fetching branches\"\nprofiler copado_git --depth \"$git_depth\" \"$promotion_branch\" \"$target_branch\"\n\nif [[ \"$rollback_enabled\" == \"true\" && \"$dry_run\" != \"true\" ]]; then\n    copado -p \"preparing rollback branch\"\n    rollback_branch=\"${promotion_branch/promotion/rollback-promotion}\"\n    # delete the remote branch if it already exists\n    [[ -n \"$(git ls-remote -h origin \"$rollback_branch\")\" ]] \\\n        && git push origin --quiet --delete \"$rollback_branch\" || true\n    git checkout \"$target_branch\"\n    copado_git --depth \"$git_depth\" -c \"$rollback_branch\"\n    echo\nfi\n\ncopado -p \"Merging branches\"\ngit checkout \"$promotion_branch\"\n#we need to copy changes from promotion branch\nprofiler copy_changed_files\ngit checkout \"$target_branch\" \n\n# merge before deploying, to fail early if the merge cannot happen due to conflicts\ngit merge -X theirs --no-progress \"$promotion_branch\" | limit_output \\\n    || copado_finish  1 \"git merge failed\" \"{}\" \"Could not merge promotion branch into destination branch\"\n\ncopado -p \"Applying replacement rules and environment rules...\"\necho \"$replacement_rules\" > ~/.replacement_rules.json\necho \"$environment_variables\" > ~/.environment_variables.json\nprofiler copado_replacer --branch \"$target_branch\"\n\necho \"$builder_config\" > ~/.builder_config.json\nif [ \"$dry_run\" == 'true' ]; then\n    copado -p \"Deploying (dry run) the promotion branch\"\n    #profiler copado_builder\n    copado -p \"Deployment (dry run) successful (${SECONDS}s)\"\nelse\n    copado -p \"Deploying the changes of the promotion branch $promotion_branch\"\n    profiler copado_builder\n\n    copado -p \"Pushing result\"\n    git checkout -- .  # clear any change made by copado_replacer\n    profiler git push --all origin \\\n        || copado_finish 1 \"Deployment successful, but git merge failed\" \"{}\" \"Could not merge promotion branch into destination branch\"\n    copado_finish 0 \"Deployment successful (${SECONDS}s)\" \"{}\" \"\"\nfi",
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "Id": "a0l7Z000004mou3QAA",
          "LastReferencedDate": "2023-02-03T12:09:22.000+0000",
          "LastViewedDate": "2023-02-03T12:09:22.000+0000",
          "Name": "SNOW Deploy"
        },
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v57.0/sobjects/copado__Function__c/a0l7Z000004mouIQAQ"
          },
          "copado__API_Name__c": "SNOW_Promote",
          "copado__Description__c": "A copado function to promote servicenow related changes",
          "copado__Image_Name__c": "copado-multicloud-servicenow:v1",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"target_branch\",\n  \"defaultValue\" : \"{$Pipeline.Property.promote_target_branch}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"user_stories\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.userStoryBranches}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"repository_id\",\n  \"defaultValue\" : \"{$Pipeline.Git_Repository__r.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"release_version\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"exclude_autoresolve\",\n  \"defaultValue\" : \"{$Pipeline.property.exclude_autoresolve}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"conflict_resolution_attachments\",\n  \"defaultValue\" : \"{$Context.apex.GetConflictResolutionAttachments}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"smart_conflict_resolution_enabled\",\n  \"defaultValue\" : \"{$Pipeline.property.smart_conflict_resolution_enabled}\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -euo pipefail\nexport SHELLOPTS\n\ncd /app\nmkdir repository && cd repository\nsource copado_init\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}'\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter promotion_branch '{$Context.JobExecution__r.DataJson.promotionBranchName}'\nfunction_parameter target_branch '{$Context.JobExecution__r.DataJson.destinationBranchName}'\nfunction_parameter user_stories '{$Context.JobExecution__r.DataJson.userStoryBranches}'\nfunction_parameter promotion_id '{$Job.ExecutionParent.Id}'\nfunction_parameter repository_id '{$Pipeline.Git_Repository__r.Id}'\nfunction_parameter release_version '{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}' --optional\nfunction_parameter exclude_autoresolve '{$Pipeline.property.exclude_autoresolve}'\nfunction_parameter conflict_resolution_attachments '{$Context.apex.GetConflictResolutionAttachments}'\nfunction_parameter smart_conflict_resolution_enabled '{$Pipeline.property.smart_conflict_resolution_enabled}'\n\nfunction fail_if_online_conflict_required() {\n    local exit_code=\"$1\"\n    if [[ $exit_code -eq 22 ]]; then\n        copado_finish 22 \"Conflict found while merging\" '{\"status\": \"conflicts\"}' \"Online conflict resolution required. Please correct the conflicts in the Promotion\"\n    fi\n}\n\nfunction fail_if_review_failed() {\n    local exit_code=\"$1\"\n    if [[ $exit_code -ne 0 ]]; then\n        copado_finish \"$exit_code\" \"Error reviewing conflicts. The error code was $exit_code\" \"\" \"Error reviewing conflicts. Please review the Logs of the operation\";\n    fi\n}\n\nfunction git_checkout_feature_branches() {\n    for merge_branch in \"${branches[@]}\"; do\n        git checkout -q \"$merge_branch\"\n    done\n}\n\n# get the feature branches from the parameters, filter out branches that do not exist in the remote, and leave the\n# result in the \"$branches\" variable\nfunction parse_feature_branches() {\n    jq -r -c '.[]' <<< \"$user_stories\" > ~/.git_branches.txt\n    readarray -t branches < ~/.git_branches.txt\n    echo \"[feature_branches] reading feature branches  ${branches[*]};\"\n    git ls-remote -h origin -- \"${branches[@]}\" | sed -e 's|^.*refs/heads/||g' > ~/.git_branches.txt\n    readarray -t branches < ~/.git_branches.txt\n    echo \"[feature_branches] existing feature branches ${branches[*]};\"\n}\n\n# merge each branch, in order, to the feature branch, resolving merges and conflicts, and committing the changes, if any.\nfunction merge_copado() {\n    for merge_branch in \"${branches[@]}\"; do\n        echo $'\\n'\"[merging] $merge_branch\"\n        # never fail, copado will process the result\n        git merge -- \"$merge_branch\" | limit_output || true\n        git status --porcelain=v2 > ~/.git_merge_result.txt\n        exit_code=0; copado_conflict_resolution --promotion-id \"$promotion_id\" --feature-branch \"$merge_branch\" || exit_code=$?\n        fail_if_online_conflict_required $exit_code\n        fail_if_review_failed $exit_code\n        git add .\n        # never fail, there might not be anything to commit\n        git commit -am \"Copado automatic merge of $merge_branch\" || true\n    done\n}\n\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite\ncopado_log_changes\n\ncopado -p \"Preparing repository\"\ncopado_git --initialize-only \"$target_branch\"\nparse_feature_branches\ncopado -p \"Fetching branches\"\nprofiler copado_git --depth \"$git_depth\" -- \"$target_branch\" \"${branches[*]}\"\nprofiler git_checkout_feature_branches\n\necho \"[promotion] re-creating promotion branch\"\ngit checkout -b \"$promotion_branch\" \"$target_branch\"\n\ncopado -p \"Merging branches into promotion\"\necho \"$conflict_resolution_attachments\" > ~/.online_resolved.json\nprofiler merge_copado\n\ncopado_log_git_history \"$target_branch\" \"$promotion_branch\"\n\ncopado -p \"Pushing branch\"\n# delete the remote branch if it already exists, never fail\n[[ -n \"$(git ls-remote -h origin \"$promotion_branch\")\" ]] \\\n    && git push origin --quiet --delete \"$promotion_branch\" || true\n# tag the release, if present\n[[ -n \"$release_version\" ]] && git tag \"$release_version\"\nprofiler git push origin --follow-tags \"$promotion_branch\" \n\ncopado_finish 0 \"Promote completed successfully (${SECONDS}s)\" \"\"\n#copado_finish 0 \"Promote completed successfully (${SECONDS}s)\" '{\"updatesetId\": \"'$updatesetId'\"}'\n#copado_finish 0 \"Promote completed successfully (${SECONDS}s)\" '{\"updatesetId\": \"fd6e64de47c49510219e9cb5536d43da\"}'",
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "Id": "a0l7Z000004mouIQAQ",
          "LastReferencedDate": "2023-02-03T07:28:22.000+0000",
          "LastViewedDate": "2023-02-03T07:28:22.000+0000",
          "Name": "SNOW Promote"
        }
      ],
      "ObjectType": "copado__Function__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v57.0/sobjects/copado__JobTemplate__c/a0u7Z00000BfYWWQA3"
          },
          "copado__ApiName__c": "SNOW_Commit_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0u7Z00000BfYWWQA3",
          "LastReferencedDate": "2023-01-25T12:47:45.000+0000",
          "LastViewedDate": "2023-01-25T12:47:45.000+0000",
          "Name": "SNOW_Commit"
        },
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v57.0/sobjects/copado__JobTemplate__c/a0u7Z00000BfYWgQAN"
          },
          "copado__ApiName__c": "SNOW_Deploy_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0u7Z00000BfYWgQAN",
          "LastReferencedDate": "2023-02-03T12:02:07.000+0000",
          "LastViewedDate": "2023-02-03T12:02:07.000+0000",
          "Name": "SNOW_Deploy"
        },
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v57.0/sobjects/copado__JobTemplate__c/a0u7Z00000BfYWqQAN"
          },
          "copado__ApiName__c": "SNOW_Promote_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0u7Z00000BfYWqQAN",
          "LastReferencedDate": "2023-01-31T10:02:37.000+0000",
          "LastViewedDate": "2023-01-31T10:02:37.000+0000",
          "Name": "SNOW_Promote"
        }
      ],
      "ObjectType": "copado__JobTemplate__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v57.0/sobjects/copado__JobStep__c/a0t7Z00000JUwUgQAL"
          },
          "copado__ApiName__c": "Snow_Deploy_1_Snow_Deploy",
          "copado__ConfigJson__c": "{\"functionName\":\"SNOW_Deploy\",\"parameters\":[{\"name\":\"git_json\",\"value\":\"{$Context.Repository.Credential}\",\"required\":false},{\"name\":\"git_email\",\"value\":\"{$User.Email}\",\"required\":false},{\"name\":\"git_name\",\"value\":\"{$User.Name}\",\"required\":false},{\"name\":\"git_depth\",\"value\":\"{$Pipeline.property.git_depth}\",\"required\":false},{\"name\":\"file_changes_id\",\"value\":\"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\",\"required\":false},{\"name\":\"promotion_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.promotionBranchName}\",\"required\":false},{\"name\":\"target_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.destinationBranchName}\",\"required\":false},{\"name\":\"replacement_rules\",\"value\":\"{$Pipeline.property.replacement_rules}\",\"required\":false},{\"name\":\"environment_variables\",\"value\":\"{$Destination.apex.EnvironmentVariables}\",\"required\":false},{\"name\":\"release_version\",\"value\":\"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\",\"required\":false},{\"name\":\"deploy_id\",\"value\":\"{$Job.ExecutionParent.Id}\",\"required\":false},{\"name\":\"dry_run\",\"value\":\"{$Context.JobExecution__r.DataJson.deploymentDryRun}\",\"required\":false},{\"name\":\"builder_config\",\"value\":\"{$Destination.property.builder_config}\",\"required\":false},{\"name\":\"rollback_enabled\",\"value\":\"false\",\"required\":false},{\"name\":\"snow_username\",\"value\":\"{$Destination.Property.snow_username}\"},{\"name\":\"snow_password\",\"value\":\"{$Destination.Property.snow_password}\"},{\"name\":\"snow_client_id\",\"value\":\"{$Destination.Property.snow_client_id}\"},{\"name\":\"snow_client_secret\",\"value\":\"{$Destination.Property.snow_client_secret}\"},{\"name\":\"snow_domain_name\",\"value\":\"{$Destination.Property.snow_domain_name}\"},{\"name\":\"promotion_id\",\"value\":\"{$Job.ExecutionParent.copado__Promotion__c}\"},{\"name\":\"updateset_id\",\"value\":\"{$Job.ExecutionParent.copado__Promotion__r.cmcSnow__Update_Set_ID__c}\"},{\"name\":\"collisionsFileVersionId\",\"value\":\"{$Context.Apex.cmcSnow.GetCollisionFileVersionId}\"},{\"name\":\"auto_resolve\",\"value\":\"{$Destination.Property.auto_resolve}\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0u7Z00000BfYWgQAN",
          "copado__Order__c": 1,
          "copado__Type__c": "Function",
          "Id": "a0t7Z00000JUwUgQAL",
          "Name": "SNOW_Deploy"
        },
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v57.0/sobjects/copado__JobStep__c/a0t7Z00000JVXFuQAP"
          },
          "copado__ApiName__c": "SNOW_Commit_1_SNOW_Commit_1",
          "copado__ConfigJson__c": "{\"functionName\":\"SNOW_Commit\",\"parameters\":[{\"name\":\"git_json\",\"value\":\"{$Context.Repository.Credential}\",\"required\":false},{\"name\":\"git_email\",\"value\":\"{$User.Email}\",\"required\":false},{\"name\":\"git_name\",\"value\":\"{$User.Name}\",\"required\":false},{\"name\":\"git_depth\",\"value\":\"{$Pipeline.Property.git_depth}\",\"required\":false},{\"name\":\"file_changes_id\",\"value\":\"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\",\"required\":false},{\"name\":\"feature_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.featureBranchName}\",\"required\":false},{\"name\":\"recreate_if_exists\",\"value\":\"{$Context.JobExecution__r.DataJson.recreateFeatureBranch}\",\"required\":false},{\"name\":\"commit_message\",\"value\":\"{$Context.JobExecution__r.DataJson.message}\",\"required\":false},{\"name\":\"base_branch\",\"value\":\"{$Pipeline.Property.commit_base_branch}\",\"required\":false},{\"name\":\"replacement_rules\",\"value\":\"{$Pipeline.Property.replacement_rules}\",\"required\":false},{\"name\":\"environment_variables\",\"value\":\"{$Source.Apex.EnvironmentVariables}\",\"required\":false},{\"name\":\"snow_username\",\"value\":\"{$Source.Property.snow_username}\",\"required\":false},{\"name\":\"snow_password\",\"value\":\"{$Source.Property.snow_password}\"},{\"name\":\"snow_client_id\",\"value\":\"{$Source.Property.snow_client_id}\"},{\"name\":\"snow_client_secret\",\"value\":\"{$Source.Property.snow_client_secret}\"},{\"name\":\"snow_domain_name\",\"value\":\"{$Source.Property.snow_domain_name}\"},{\"name\":\"snow_json_information\",\"value\":\"{$Context.JobExecution__r.DataJson.jsonInformation}\"},{\"name\":\"user_story_id\",\"value\":\"{$Context.JobExecution__r.DataJson.userStoryId}\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0u7Z00000BfYWWQA3",
          "copado__Order__c": 1,
          "copado__Type__c": "Function",
          "Id": "a0t7Z00000JVXFuQAP",
          "Name": "SNOW_Commit"
        },
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v57.0/sobjects/copado__JobStep__c/a0t7Z00000JVXFzQAP"
          },
          "copado__ApiName__c": "SNOW_Promote_1_SNOW_Promote_1",
          "copado__ConfigJson__c": "{\"functionName\":\"SNOW_Promote\",\"parameters\":[{\"name\":\"git_json\",\"value\":\"{$Context.Repository.Credential}\",\"required\":false},{\"name\":\"git_email\",\"value\":\"{$User.Email}\",\"required\":false},{\"name\":\"git_name\",\"value\":\"{$User.Name}\",\"required\":false},{\"name\":\"git_depth\",\"value\":\"{$Pipeline.property.git_depth}\",\"required\":false},{\"name\":\"file_changes_id\",\"value\":\"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\",\"required\":false},{\"name\":\"promotion_branch\",\"value\":\"{$Context.JobExecution__r.DataJson.promotionBranchName}\",\"required\":false},{\"name\":\"target_branch\",\"value\":\"{$Pipeline.Property.promote_target_branch}\",\"required\":false},{\"name\":\"user_stories\",\"value\":\"{$Context.JobExecution__r.DataJson.userStoryBranches}\",\"required\":false},{\"name\":\"promotion_id\",\"value\":\"{$Job.ExecutionParent.Id}\",\"required\":false},{\"name\":\"repository_id\",\"value\":\"{$Pipeline.Git_Repository__r.Id}\",\"required\":false},{\"name\":\"release_version\",\"value\":\"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\",\"required\":false},{\"name\":\"exclude_autoresolve\",\"value\":\"{$Pipeline.property.exclude_autoresolve}\",\"required\":false},{\"name\":\"conflict_resolution_attachments\",\"value\":\"{$Context.apex.GetConflictResolutionAttachments}\",\"required\":false},{\"name\":\"smart_conflict_resolution_enabled\",\"value\":\"{$Pipeline.property.smart_conflict_resolution_enabled}\",\"required\":false}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0u7Z00000BfYWqQAN",
          "copado__Order__c": 1,
          "copado__Type__c": "Function",
          "Id": "a0t7Z00000JVXFzQAP",
          "Name": "SNOW_Promote"
        }
      ],
      "ObjectType": "copado__JobStep__c"
    }
  ],
  "blobsByUID": {}
}